18a19
> #include <linux/pm_qos.h>
92a94,97
> 					 
> 	struct freq_constraints	constraints;
> 	struct freq_qos_request	*min_freq_req;
> 	struct freq_qos_request	*max_freq_req;
189a195
> unsigned int cpufreq_get_hw_max_freq(unsigned int cpu);
194a201
> void cpufreq_update_limits(unsigned int cpu);
211a219,222
> static inline unsigned int cpufreq_get_hw_max_freq(unsigned int cpu)
> {
>   	return 0;
> }
329a341,344
> 
> 	/* Called to update policy limits on firmware notifications. */
> 	void		(*update_limits)(unsigned int cpu);
> 
439a455,456
> #define CPUFREQ_CREATE_POLICY		(0)
> #define CPUFREQ_REMOVE_POLICY		(1)
527a545,549
> void cpufreq_driver_adjust_perf(unsigned int cpu,
> 				unsigned long min_perf,
> 				unsigned long target_perf,
> 				unsigned long capacity);
> bool cpufreq_driver_has_adjust_perf(void);
538a561,576
> int cpufreq_start_governor(struct cpufreq_policy *policy);
> void cpufreq_stop_governor(struct cpufreq_policy *policy);
> 
> #define cpufreq_governor_init(__governor)			\
> static int __init __governor##_init(void)			\
> {								\
> 	return cpufreq_register_governor(&__governor);	\
> }								\
> core_initcall(__governor##_init)
> 
> #define cpufreq_governor_exit(__governor)			\
> static void __exit __governor##_exit(void)			\
> {								\
> 	return cpufreq_unregister_governor(&__governor);	\
> }								\
> module_exit(__governor##_exit)
919a958
> extern void arch_freq_prepare_all(void);
920a960,962
> 
> extern void arch_set_freq_scale(struct cpumask *cpus, unsigned long cur_freq,
> 				unsigned long max_freq);
