80,81c80,81
< static int cpufreq_start_governor(struct cpufreq_policy *policy);
< static void cpufreq_stop_governor(struct cpufreq_policy *policy);
---
> //static int cpufreq_start_governor(struct cpufreq_policy *policy);
> //static void cpufreq_stop_governor(struct cpufreq_policy *policy);
163a164,169
> __weak void arch_set_freq_scale(struct cpumask *cpus, unsigned long cur_freq,
> 		unsigned long max_freq)
> {
> }
> EXPORT_SYMBOL_GPL(arch_set_freq_scale);
> 
1103a1110,1111
> 	
> 	freq_constraints_init(&policy->constraints);
1519a1528,1547
> /**
>  * cpufreq_get_hw_max_freq - get the max hardware frequency of the CPU
>  * @cpu: CPU number
>  *
>  * The default return value is the max_freq field of cpuinfo.
>  */
> __weak unsigned int cpufreq_get_hw_max_freq(unsigned int cpu)
> {
> 	struct cpufreq_policy *policy = cpufreq_cpu_get(cpu);
> 	unsigned int ret_freq = 0;
> 
> 	if (policy) {
> 		ret_freq = policy->cpuinfo.max_freq;
> 		cpufreq_cpu_put(policy);
> 	}
> 
> 	return ret_freq;
> }
> EXPORT_SYMBOL(cpufreq_get_hw_max_freq);
> 
2061c2089
< static int cpufreq_start_governor(struct cpufreq_policy *policy)
---
> /*static*/ int cpufreq_start_governor(struct cpufreq_policy *policy)
2088c2116
< static void cpufreq_stop_governor(struct cpufreq_policy *policy)
---
> /*static*/ void cpufreq_stop_governor(struct cpufreq_policy *policy)
2333a2362,2377
> 
> /**
>  * cpufreq_update_limits - Update policy limits for a given CPU.
>  * @cpu: CPU to update the policy limits for.
>  *
>  * Invoke the driver's ->update_limits callback if present or call
>  * cpufreq_update_policy() for @cpu.
>  */
> void cpufreq_update_limits(unsigned int cpu)
> {
> 	if (cpufreq_driver->update_limits)
> 		cpufreq_driver->update_limits(cpu);
> 	else
> 		cpufreq_update_policy(cpu);
> }
> EXPORT_SYMBOL_GPL(cpufreq_update_limits);
